name: Sync Kaggle Notebooks

on: [workflow_dispatch]

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install All Notebook Dependencies
        run: |
          pip install --upgrade pip
          pip install kaggle nbconvert jupyter pandas numpy seaborn matplotlib scikit-learn xgboost lightgbm nltk transformers


      - name: Configure Kaggle API
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          mkdir -p ~/.kaggle
          echo '{"username":"'$KAGGLE_USERNAME'","key":"'$KAGGLE_KEY'"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Clean Previous Outputs
        run: |
          rm -rf Kaggle-top-3-notebook docs
          mkdir -p Kaggle-top-3-notebook

      - name: Download Datasets
        run: |
          # Dataset 1 for 2_Clustering_PCA_KMeans notebook
          mkdir -p Kaggle-top-3-notebook/2_Clustering_PCA_KMeans/dataset_files
          kaggle datasets download -d rohan0301/unsupervised-learning-on-country-data -p Kaggle-top-3-notebook/2_Clustering_PCA_KMeans/dataset_files
          unzip -o Kaggle-top-3-notebook/2_Clustering_PCA_KMeans/dataset_files/unsupervised-learning-on-country-data.zip -d Kaggle-top-3-notebook/2_Clustering_PCA_KMeans/dataset_files
          rm Kaggle-top-3-notebook/2_Clustering_PCA_KMeans/dataset_files/unsupervised-learning-on-country-data.zip

          # Dataset 2 for 1_Manga_Sales notebook
          mkdir -p Kaggle-top-3-notebook/1_Manga_Sales/dataset_files
          kaggle datasets download -d drahulsingh/best-selling-manga -p Kaggle-top-3-notebook/1_Manga_Sales/dataset_files
          unzip -o Kaggle-top-3-notebook/1_Manga_Sales/dataset_files/best-selling-manga.zip -d Kaggle-top-3-notebook/1_Manga_Sales/dataset_files
          rm Kaggle-top-3-notebook/1_Manga_Sales/dataset_files/best-selling-manga.zip

          # Dataset 3 for 3_NLP_GRU_Emotions notebook
          mkdir -p Kaggle-top-3-notebook/3_NLP_GRU_Emotions/dataset_files
          kaggle datasets download -d nelgiriyewithana/emotions -p Kaggle-top-3-notebook/3_NLP_GRU_Emotions/dataset_files
          unzip -o Kaggle-top-3-notebook/3_NLP_GRU_Emotions/dataset_files/emotions.zip -d Kaggle-top-3-notebook/3_NLP_GRU_Emotions/dataset_files
          rm Kaggle-top-3-notebook/3_NLP_GRU_Emotions/dataset_files/emotions.zip

      - name: Download Notebooks into Named Subfolders
        run: |
          # Manga Sales
          mkdir -p Kaggle-top-3-notebook/1_Manga_Sales/images
          kaggle kernels pull adelanseur/manga-sales-eda-ml -p Kaggle-top-3-notebook/1_Manga_Sales
          mv Kaggle-top-3-notebook/1_Manga_Sales/manga-sales-eda-ml.ipynb Kaggle-top-3-notebook/1_Manga_Sales/1_Manga_Sales.ipynb

          # Clustering
          mkdir -p Kaggle-top-3-notebook/2_Clustering_PCA_KMeans/images
          kaggle kernels pull adelanseur/clustering-pca-k-means -p Kaggle-top-3-notebook/2_Clustering_PCA_KMeans
          mv Kaggle-top-3-notebook/2_Clustering_PCA_KMeans/clustering-pca-k-means.ipynb Kaggle-top-3-notebook/2_Clustering_PCA_KMeans/2_Clustering_PCA_KMeans.ipynb

          # NLP GRU
          mkdir -p Kaggle-top-3-notebook/3_NLP_GRU_Emotions/images
          kaggle kernels pull adelanseur/nlp-gru-emotions-analysis -p Kaggle-top-3-notebook/3_NLP_GRU_Emotions
          mv Kaggle-top-3-notebook/3_NLP_GRU_Emotions/nlp-gru-emotions-analysis.ipynb Kaggle-top-3-notebook/3_NLP_GRU_Emotions/3_NLP_GRU_Emotions.ipynb

      - name: Execute and Convert Notebooks to HTML
        run: |
          for folder in Kaggle-top-3-notebook/*/; do
            base=$(basename "$folder")
            ipynb="$folder/${base}.ipynb"
            html="$folder/${base}.html"
      
            echo "▶️ Executing: $ipynb"
            if [ -f "$ipynb" ]; then
              jupyter nbconvert "$ipynb" \
                --to html \
                --output "$html" \
                --execute \
                --ExecutePreprocessor.timeout=300 \
                --EmbedImagesPreprocessor.embed_images=True \
                --no-input
              echo "✅ Converted: $html"
            else
              echo "❌ Notebook file not found: $ipynb"
            fi
          done


      - name: Copy HTML files to /docs for GitHub Pages
        run: |
          mkdir -p docs
          find Kaggle-top-3-notebook -name "*.html" -exec cp {} docs/ \;
          echo "✅ HTML files copied to docs/"
          ls -l docs



      - name: Commit Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      
          git add -f Kaggle-top-3-notebook/**/* || true
          git add -f docs || true
      
          git status
      
          git commit -m "chore: Sync and update notebooks, datasets, and HTML previews on $(date +'%Y-%m-%d')" || \
            (echo "⚠️ No changes to commit" && git commit --allow-empty -m "chore: Empty commit run")

          git push

